#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for SSD1306 display connected using software SPI (default case):
#define OLED_MOSI   9
#define OLED_CLK   10
#define OLED_DC    11
#define OLED_CS    12
#define OLED_RESET 13
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
  OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

/* Comment out above, uncomment this block to use hardware SPI
#define OLED_DC     6
#define OLED_CS     7
#define OLED_RESET  8
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
  &SPI, OLED_DC, OLED_RESET, OLED_CS);
*/

#define NUMFLAKES     10 // Number of snowflakes in the animation example

#define LOGO_HEIGHT   16
#define LOGO_WIDTH    16
static const unsigned char PROGMEM logo_bmp[] =
{ 0b00000000, 0b11000000,
  0b00000001, 0b11000000,
  0b00000001, 0b11000000,
  0b00000011, 0b11100000,
  0b11110011, 0b11100000,
  0b11111110, 0b11111000,
  0b01111110, 0b11111111,
  0b00110011, 0b10011111,
  0b00011111, 0b11111100,
  0b00001101, 0b01110000,
  0b00011011, 0b10100000,
  0b00111111, 0b11100000,
  0b00111111, 0b11110000,
  0b01111100, 0b11110000,
  0b01110000, 0b01110000,
  0b00000000, 0b00110000 };

void setup() {
  Serial.begin(9600);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen -- the library initializes this with an Adafruit splash screen.
  display.display();
  delay(2000); // Pause for 2 seconds

  // Clear the buffer
  display.clearDisplay();

  // Display your name and project message on separate lines
  display.setTextSize(1);      // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE); // Draw white text
  display.setCursor(0, 0);     // Start at top-left corner
  display.println(F("Ahmed Diaa")); // First line of text
  display.setCursor(0, 10);    // Next line starts at position y = 10
  display.println(F("That is my first")); // Second line of text
  display.setCursor(0, 20);    // Next line starts at position y = 20
  display.println(F("Project by OLED")); // Third line of text
  display.setCursor(0, 30);    // Next line starts at position y = 30
  display.println(F("22 / 2 / 2025 ")); // Third line of text
  display.setCursor(0, 40);    // Next line starts at position y = 40
  display.println(F("11 : 46")); // Third line of text

  // Show the message
  display.display();
  delay(2000); // Display message for 2 seconds

  // Clear the buffer before animations
  display.clearDisplay();

  // Start the snowflake animation
  testanimate(logo_bmp, LOGO_WIDTH, LOGO_HEIGHT); // Animate bitmaps
}

void loop() {
}

void testanimate(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  int8_t f, icons[NUMFLAKES][3];

  // Initialize 'snowflake' positions
  for(f = 0; f < NUMFLAKES; f++) {
    icons[f][0] = random(0, display.width());  // Random position for X
    icons[f][1] = random(0, display.height()); // Random position for Y
    icons[f][2] = random(1, 3); // Random speed for falling snowflakes
  }

  // Animation loop
  while (true) {
    display.clearDisplay(); // Clear the display

    // Move and draw each snowflake
    for(f = 0; f < NUMFLAKES; f++) {
      display.drawBitmap(icons[f][0], icons[f][1], bitmap, w, h, SSD1306_WHITE);
      icons[f][1] += icons[f][2]; // Move the snowflake down

      // Reset position when the snowflake falls off the screen
      if (icons[f][1] >= display.height()) {
        icons[f][1] = 0; // Reset to the top
        icons[f][0] = random(0, display.width()); // Random X position
      }
    }

    display.display(); // Show updated snowflakes
    delay(50); // Delay to control speed of animation
  }
}
